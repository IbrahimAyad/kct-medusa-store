import {
  useCurrenciesTableColumns,
  useCurrenciesTableQuery
} from "./chunk-V5CE5YN3.js";
import "./chunk-ICY2MZON.js";
import {
  StatusCell
} from "./chunk-STN2GTYD.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-Z7JNCSGP.js";
import {
  _DataTable,
  useDataTable
} from "./chunk-OVTUYWY6.js";
import "./chunk-MNCUMGDK.js";
import "./chunk-JTFKFVR4.js";
import "./chunk-W2QVROAD.js";
import {
  SingleColumnPage
} from "./chunk-3XLI6TEK.js";
import "./chunk-6A5KAQL3.js";
import "./chunk-ZXVW7VE7.js";
import "./chunk-X5HQAIV7.js";
import "./chunk-LNH4KKOB.js";
import "./chunk-PWUDRQ7V.js";
import {
  SingleColumnPageSkeleton
} from "./chunk-OYOURVXX.js";
import {
  useDashboardExtension
} from "./chunk-UT557UZM.js";
import "./chunk-JIWIBYO5.js";
import "./chunk-XMLFM6ZI.js";
import "./chunk-UESAM5J2.js";
import {
  ActionMenu
} from "./chunk-SQJS63XZ.js";
import "./chunk-OC57Q4WC.js";
import "./chunk-I2UAGZ5U.js";
import "./chunk-O2SHVWJ7.js";
import "./chunk-QJMXPFFL.js";
import "./chunk-LOUCI2Q4.js";
import "./chunk-XAMQAMS2.js";
import "./chunk-ROURSU5C.js";
import "./chunk-3KPNDMHA.js";
import "./chunk-ASAFUTMI.js";
import "./chunk-CUGIGQSE.js";
import "./chunk-EALJ6LYP.js";
import "./chunk-M2YD6SSP.js";
import "./chunk-H7RVGO5V.js";
import "./chunk-DIIJTXZ5.js";
import "./chunk-7VSODY7F.js";
import "./chunk-NAVAVTBR.js";
import "./chunk-GPU4IRKF.js";
import "./chunk-HVSYJRGA.js";
import {
  useCurrencies
} from "./chunk-YXEQJJQ6.js";
import "./chunk-SITKGSYT.js";
import "./chunk-LQUA6FVL.js";
import "./chunk-VHV5XFAR.js";
import "./chunk-L4VVV4Q5.js";
import "./chunk-22K6ITTI.js";
import "./chunk-5PZIRSSS.js";
import {
  useStockLocation
} from "./chunk-WYOKNF2W.js";
import "./chunk-J5VA6PIN.js";
import "./chunk-MSCXQBUM.js";
import {
  retrieveActiveStore,
  storeQueryKeys,
  useStore,
  useUpdateStore
} from "./chunk-4QIH7XF5.js";
import {
  useRegion
} from "./chunk-NQP3QFYS.js";
import {
  usePricePreferences
} from "./chunk-DEUZS3W7.js";
import {
  useSalesChannel
} from "./chunk-UMSNNOPD.js";
import "./chunk-QQSOZAMU.js";
import "./chunk-7YF3433E.js";
import {
  queryClient
} from "./chunk-KZEAZRGV.js";
import "./chunk-S7K3MYSB.js";
import "./chunk-MGWFURCB.js";
import {
  useTranslation
} from "./chunk-FSQ44SVG.js";
import "./chunk-WPKD3INM.js";
import {
  Link,
  useLoaderData
} from "./chunk-2WRJVAK6.js";
import {
  keepPreviousData
} from "./chunk-FZZ47AFW.js";
import "./chunk-2COJD4UJ.js";
import {
  Badge,
  CheckCircle,
  Checkbox,
  CommandBar,
  Container,
  Heading,
  PencilSquare,
  Plus,
  Text,
  Trash,
  XCircle,
  createColumnHelper,
  toast,
  usePrompt
} from "./chunk-7TA3O4Z5.js";
import "./chunk-NOBDUI2K.js";
import {
  require_jsx_runtime
} from "./chunk-JURSM5AU.js";
import "./chunk-VARPEBF3.js";
import {
  require_react
} from "./chunk-ZP5CUZDC.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/store-detail-DUCILQW7.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var storeDetailQuery = () => ({
  queryKey: storeQueryKeys.details(),
  queryFn: async () => retrieveActiveStore()
});
var storeLoader = async () => {
  const query = storeDetailQuery();
  return queryClient.getQueryData(query.queryKey) ?? await queryClient.fetchQuery(query);
};
var PAGE_SIZE = 10;
var StoreCurrencySection = ({ store }) => {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const [rowSelection, setRowSelection] = (0, import_react.useState)({});
  const { searchParams, raw } = useCurrenciesTableQuery({ pageSize: PAGE_SIZE });
  const {
    currencies,
    count,
    isPending: isCurrenciesPending,
    isError: isCurrenciesError,
    error: currenciesError
  } = useCurrencies(
    {
      code: (_a = store.supported_currencies) == null ? void 0 : _a.map((c) => c.currency_code),
      ...searchParams
    },
    {
      placeholderData: keepPreviousData,
      enabled: !!((_b = store.supported_currencies) == null ? void 0 : _b.length)
    }
  );
  const {
    price_preferences: pricePreferences,
    isPending: isPricePreferencesPending,
    isError: isPricePreferencesError,
    error: pricePreferencesError
  } = usePricePreferences(
    {
      attribute: "currency_code",
      value: (_c = store.supported_currencies) == null ? void 0 : _c.map((c) => c.currency_code)
    },
    {
      enabled: !!((_d = store.supported_currencies) == null ? void 0 : _d.length)
    }
  );
  const columns = useColumns();
  const prefMap = (0, import_react.useMemo)(() => {
    return new Map(pricePreferences == null ? void 0 : pricePreferences.map((pref) => [pref.value, pref]));
  }, [pricePreferences]);
  const withTaxInclusivity = currencies == null ? void 0 : currencies.map((c) => {
    var _a2;
    return {
      ...c,
      is_tax_inclusive: (_a2 = prefMap.get(c.code)) == null ? void 0 : _a2.is_tax_inclusive
    };
  });
  const { table } = useDataTable({
    data: withTaxInclusivity ?? [],
    columns,
    count,
    getRowId: (row) => row.code,
    rowSelection: {
      state: rowSelection,
      updater: setRowSelection
    },
    enablePagination: true,
    enableRowSelection: true,
    pageSize: PAGE_SIZE,
    meta: {
      storeId: store.id,
      supportedCurrencies: store.supported_currencies,
      defaultCurrencyCode: (_f = (_e = store.supported_currencies) == null ? void 0 : _e.find((c) => c.is_default)) == null ? void 0 : _f.currency_code,
      preferencesMap: prefMap
    }
  });
  const { mutateAsync } = useUpdateStore(store.id);
  const { t } = useTranslation();
  const prompt = usePrompt();
  const handleDeleteCurrencies = async () => {
    var _a2;
    const ids = Object.keys(rowSelection);
    const result = await prompt({
      title: t("general.areYouSure"),
      description: t("store.removeCurrencyWarning", {
        count: ids.length
      }),
      confirmText: t("actions.remove"),
      cancelText: t("actions.cancel")
    });
    if (!result) {
      return;
    }
    await mutateAsync(
      {
        supported_currencies: ((_a2 = store.supported_currencies) == null ? void 0 : _a2.filter(
          (c) => !ids.includes(c.currency_code)
        )) ?? []
      },
      {
        onSuccess: () => {
          setRowSelection({});
          toast.success(t("store.toast.currenciesRemoved"));
        },
        onError: (e) => {
          toast.error(e.message);
        }
      }
    );
  };
  if (isCurrenciesError) {
    throw currenciesError;
  }
  if (isPricePreferencesError) {
    throw pricePreferencesError;
  }
  const isLoading = isCurrenciesPending || isPricePreferencesPending;
  return (0, import_jsx_runtime.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime.jsx)(Heading, { level: "h2", children: t("store.currencies") }),
      (0, import_jsx_runtime.jsx)(
        ActionMenu,
        {
          groups: [
            {
              actions: [
                {
                  icon: (0, import_jsx_runtime.jsx)(Plus, {}),
                  label: t("actions.add"),
                  to: "currencies"
                }
              ]
            }
          ]
        }
      )
    ] }),
    (0, import_jsx_runtime.jsx)(
      _DataTable,
      {
        orderBy: [
          { key: "name", label: t("fields.name") },
          { key: "code", label: t("fields.code") }
        ],
        search: true,
        pagination: true,
        table,
        pageSize: PAGE_SIZE,
        columns,
        count: !((_g = store.supported_currencies) == null ? void 0 : _g.length) ? 0 : count,
        isLoading: !((_h = store.supported_currencies) == null ? void 0 : _h.length) ? false : isLoading,
        queryObject: raw
      }
    ),
    (0, import_jsx_runtime.jsx)(CommandBar, { open: !!Object.keys(rowSelection).length, children: (0, import_jsx_runtime.jsxs)(CommandBar.Bar, { children: [
      (0, import_jsx_runtime.jsx)(CommandBar.Value, { children: t("general.countSelected", {
        count: Object.keys(rowSelection).length
      }) }),
      (0, import_jsx_runtime.jsx)(CommandBar.Seperator, {}),
      (0, import_jsx_runtime.jsx)(
        CommandBar.Command,
        {
          action: handleDeleteCurrencies,
          shortcut: "r",
          label: t("actions.remove")
        }
      )
    ] }) })
  ] });
};
var CurrencyActions = ({
  storeId,
  currency,
  supportedCurrencies,
  defaultCurrencyCode,
  preferencesMap
}) => {
  var _a, _b;
  const { mutateAsync } = useUpdateStore(storeId);
  const { t } = useTranslation();
  const prompt = usePrompt();
  const handleRemove = async () => {
    const result = await prompt({
      title: t("general.areYouSure"),
      description: t("store.removeCurrencyWarning", {
        count: 1
      }),
      verificationInstruction: t("general.typeToConfirm"),
      verificationText: currency.name,
      confirmText: t("actions.remove"),
      cancelText: t("actions.cancel")
    });
    if (!result) {
      return;
    }
    await mutateAsync(
      {
        supported_currencies: supportedCurrencies.filter(
          (c) => c.currency_code !== currency.code
        )
      },
      {
        onSuccess: () => {
          toast.success(t("store.toast.currenciesRemoved"));
        },
        onError: (e) => {
          toast.error(e.message);
        }
      }
    );
  };
  const handleToggleTaxInclusivity = async () => {
    await mutateAsync(
      {
        supported_currencies: supportedCurrencies.map((c) => {
          const pref = preferencesMap.get(c.currency_code);
          return {
            ...c,
            is_tax_inclusive: c.currency_code === currency.code ? !(pref == null ? void 0 : pref.is_tax_inclusive) : void 0
          };
        })
      },
      {
        onSuccess: () => {
          toast.success(t("store.toast.updatedTaxInclusivitySuccessfully"));
        },
        onError: (e) => {
          toast.error(e.message);
        }
      }
    );
  };
  return (0, import_jsx_runtime.jsx)(
    ActionMenu,
    {
      groups: [
        {
          actions: [
            {
              icon: ((_a = preferencesMap.get(currency.code)) == null ? void 0 : _a.is_tax_inclusive) ? (0, import_jsx_runtime.jsx)(XCircle, {}) : (0, import_jsx_runtime.jsx)(CheckCircle, {}),
              label: ((_b = preferencesMap.get(currency.code)) == null ? void 0 : _b.is_tax_inclusive) ? t("store.disableTaxInclusivePricing") : t("store.enableTaxInclusivePricing"),
              onClick: handleToggleTaxInclusivity
            }
          ]
        },
        {
          actions: [
            {
              icon: (0, import_jsx_runtime.jsx)(Trash, {}),
              label: t("actions.remove"),
              onClick: handleRemove,
              disabled: currency.code === defaultCurrencyCode
            }
          ]
        }
      ]
    }
  );
};
var columnHelper = createColumnHelper();
var useColumns = () => {
  const base = useCurrenciesTableColumns();
  const { t } = useTranslation();
  return (0, import_react.useMemo)(
    () => [
      columnHelper.display({
        id: "select",
        header: ({ table }) => {
          return (0, import_jsx_runtime.jsx)(
            Checkbox,
            {
              checked: table.getIsSomePageRowsSelected() ? "indeterminate" : table.getIsAllPageRowsSelected(),
              onCheckedChange: (value) => table.toggleAllPageRowsSelected(!!value)
            }
          );
        },
        cell: ({ row }) => {
          return (0, import_jsx_runtime.jsx)(
            Checkbox,
            {
              checked: row.getIsSelected(),
              onCheckedChange: (value) => row.toggleSelected(!!value),
              onClick: (e) => {
                e.stopPropagation();
              }
            }
          );
        }
      }),
      ...base,
      columnHelper.accessor("is_tax_inclusive", {
        header: t("fields.taxInclusivePricing"),
        cell: ({ getValue }) => {
          const isTaxInclusive = getValue();
          return (0, import_jsx_runtime.jsx)(StatusCell, { color: isTaxInclusive ? "green" : "grey", children: isTaxInclusive ? t("fields.true") : t("fields.false") });
        }
      }),
      columnHelper.display({
        id: "actions",
        cell: ({ row, table }) => {
          const {
            supportedCurrencies,
            storeId,
            defaultCurrencyCode,
            preferencesMap
          } = table.options.meta;
          return (0, import_jsx_runtime.jsx)(
            CurrencyActions,
            {
              storeId,
              currency: row.original,
              supportedCurrencies,
              defaultCurrencyCode,
              preferencesMap
            }
          );
        }
      })
    ],
    [base, t]
  );
};
var StoreGeneralSection = ({ store }) => {
  var _a, _b, _c;
  const { t } = useTranslation();
  const { region } = useRegion(store.default_region_id, void 0, {
    enabled: !!store.default_region_id
  });
  const defaultCurrency = (_a = store.supported_currencies) == null ? void 0 : _a.find((c) => c.is_default);
  const { sales_channel } = useSalesChannel(store.default_sales_channel_id, {
    enabled: !!store.default_sales_channel_id
  });
  const { stock_location } = useStockLocation(
    store.default_location_id,
    {
      fields: "id,name"
    },
    {
      enabled: !!store.default_location_id
    }
  );
  return (0, import_jsx_runtime2.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime2.jsxs)("div", { children: [
        (0, import_jsx_runtime2.jsx)(Heading, { children: t("store.domain") }),
        (0, import_jsx_runtime2.jsx)(Text, { className: "text-ui-fg-subtle", size: "small", children: t("store.manageYourStoresDetails") })
      ] }),
      (0, import_jsx_runtime2.jsx)(
        ActionMenu,
        {
          groups: [
            {
              actions: [
                {
                  icon: (0, import_jsx_runtime2.jsx)(PencilSquare, {}),
                  label: t("actions.edit"),
                  to: "edit"
                }
              ]
            }
          ]
        }
      )
    ] }),
    (0, import_jsx_runtime2.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 px-6 py-4", children: [
      (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: t("fields.name") }),
      (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", children: store.name })
    ] }),
    (0, import_jsx_runtime2.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 px-6 py-4", children: [
      (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: t("store.defaultCurrency") }),
      defaultCurrency ? (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center gap-x-2", children: [
        (0, import_jsx_runtime2.jsx)(Badge, { size: "2xsmall", children: (_b = defaultCurrency.currency_code) == null ? void 0 : _b.toUpperCase() }),
        (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", children: (_c = defaultCurrency.currency) == null ? void 0 : _c.name })
      ] }) : (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", children: "-" })
    ] }),
    (0, import_jsx_runtime2.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 px-6 py-4", children: [
      (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: t("store.defaultRegion") }),
      (0, import_jsx_runtime2.jsx)("div", { className: "flex items-center gap-x-2", children: region ? (0, import_jsx_runtime2.jsx)(Badge, { size: "2xsmall", asChild: true, children: (0, import_jsx_runtime2.jsx)(Link, { to: `/settings/regions/${region.id}`, children: region.name }) }) : (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", children: "-" }) })
    ] }),
    (0, import_jsx_runtime2.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 px-6 py-4", children: [
      (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: t("store.defaultSalesChannel") }),
      (0, import_jsx_runtime2.jsx)("div", { className: "flex items-center gap-x-2", children: sales_channel ? (0, import_jsx_runtime2.jsx)(Badge, { size: "2xsmall", asChild: true, children: (0, import_jsx_runtime2.jsx)(Link, { to: `/settings/sales-channels/${sales_channel.id}`, children: sales_channel.name }) }) : (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", children: "-" }) })
    ] }),
    (0, import_jsx_runtime2.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 px-6 py-4", children: [
      (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: t("store.defaultLocation") }),
      (0, import_jsx_runtime2.jsx)("div", { className: "flex items-center gap-x-2", children: stock_location ? (0, import_jsx_runtime2.jsx)(Badge, { size: "2xsmall", asChild: true, children: (0, import_jsx_runtime2.jsx)(Link, { to: `/settings/locations/${stock_location.id}`, children: stock_location.name }) }) : (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", children: "-" }) })
    ] })
  ] });
};
var StoreDetail = () => {
  const initialData = useLoaderData();
  const { store, isPending, isError, error } = useStore(void 0, {
    initialData
  });
  const { getWidgets } = useDashboardExtension();
  if (isPending || !store) {
    return (0, import_jsx_runtime3.jsx)(SingleColumnPageSkeleton, { sections: 2, showJSON: true, showMetadata: true });
  }
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime3.jsxs)(
    SingleColumnPage,
    {
      widgets: {
        before: getWidgets("store.details.before"),
        after: getWidgets("store.details.after")
      },
      data: store,
      hasOutlet: true,
      showMetadata: true,
      showJSON: true,
      children: [
        (0, import_jsx_runtime3.jsx)(StoreGeneralSection, { store }),
        (0, import_jsx_runtime3.jsx)(StoreCurrencySection, { store })
      ]
    }
  );
};
export {
  StoreDetail as Component,
  storeLoader as loader
};
//# sourceMappingURL=store-detail-DUCILQW7-BMVT6J3I.js.map
