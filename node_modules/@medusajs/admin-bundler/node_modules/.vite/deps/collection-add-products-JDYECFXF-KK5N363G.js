import {
  useProductTableColumns
} from "./chunk-5EK3J6WW.js";
import "./chunk-DQ6ZYWLF.js";
import "./chunk-STN2GTYD.js";
import "./chunk-Z7JNCSGP.js";
import {
  _DataTable,
  useDataTable
} from "./chunk-OVTUYWY6.js";
import "./chunk-MNCUMGDK.js";
import "./chunk-JTFKFVR4.js";
import "./chunk-W2QVROAD.js";
import {
  KeyboundForm
} from "./chunk-H3QLNIQZ.js";
import {
  useProductTableQuery
} from "./chunk-PLRGAOAM.js";
import {
  useProductTableFilters
} from "./chunk-PGM4XF67.js";
import "./chunk-6A5KAQL3.js";
import "./chunk-ZXVW7VE7.js";
import "./chunk-X5HQAIV7.js";
import "./chunk-LNH4KKOB.js";
import "./chunk-PWUDRQ7V.js";
import {
  RouteFocusModal,
  useRouteModal
} from "./chunk-RRVV3WYZ.js";
import "./chunk-I6G7V5AL.js";
import "./chunk-OYOURVXX.js";
import {
  t
} from "./chunk-XMLFM6ZI.js";
import {
  arrayType,
  objectType,
  stringType
} from "./chunk-UESAM5J2.js";
import "./chunk-I2UAGZ5U.js";
import "./chunk-O2SHVWJ7.js";
import "./chunk-QJMXPFFL.js";
import "./chunk-LOUCI2Q4.js";
import "./chunk-XAMQAMS2.js";
import "./chunk-ROURSU5C.js";
import "./chunk-3KPNDMHA.js";
import "./chunk-ASAFUTMI.js";
import "./chunk-CUGIGQSE.js";
import "./chunk-EALJ6LYP.js";
import "./chunk-M2YD6SSP.js";
import "./chunk-H7RVGO5V.js";
import "./chunk-DIIJTXZ5.js";
import "./chunk-7VSODY7F.js";
import "./chunk-NAVAVTBR.js";
import "./chunk-GPU4IRKF.js";
import "./chunk-HVSYJRGA.js";
import "./chunk-YXEQJJQ6.js";
import "./chunk-SITKGSYT.js";
import "./chunk-LQUA6FVL.js";
import "./chunk-VHV5XFAR.js";
import {
  useCollection,
  useUpdateCollectionProducts
} from "./chunk-L4VVV4Q5.js";
import "./chunk-22K6ITTI.js";
import "./chunk-5PZIRSSS.js";
import "./chunk-WYOKNF2W.js";
import "./chunk-J5VA6PIN.js";
import "./chunk-MSCXQBUM.js";
import "./chunk-4QIH7XF5.js";
import "./chunk-NQP3QFYS.js";
import "./chunk-DEUZS3W7.js";
import "./chunk-UMSNNOPD.js";
import "./chunk-QQSOZAMU.js";
import {
  useProducts
} from "./chunk-7YF3433E.js";
import "./chunk-KZEAZRGV.js";
import "./chunk-S7K3MYSB.js";
import {
  useForm
} from "./chunk-MGWFURCB.js";
import {
  useTranslation
} from "./chunk-FSQ44SVG.js";
import "./chunk-WPKD3INM.js";
import {
  useParams
} from "./chunk-2WRJVAK6.js";
import {
  keepPreviousData
} from "./chunk-FZZ47AFW.js";
import "./chunk-2COJD4UJ.js";
import {
  Button,
  Checkbox,
  Hint,
  Tooltip,
  createColumnHelper,
  toast
} from "./chunk-7TA3O4Z5.js";
import "./chunk-NOBDUI2K.js";
import {
  require_jsx_runtime
} from "./chunk-JURSM5AU.js";
import "./chunk-VARPEBF3.js";
import {
  require_react
} from "./chunk-ZP5CUZDC.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/collection-add-products-JDYECFXF.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var AddProductsToCollectionSchema = objectType({
  add: arrayType(stringType()).min(1)
});
var PAGE_SIZE = 50;
var PREFIX = "p";
var AddProductsToCollectionForm = ({
  collection
}) => {
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const form = useForm({
    defaultValues: {
      add: []
    },
    resolver: t(AddProductsToCollectionSchema)
  });
  const { setValue } = form;
  const { mutateAsync, isPending: isMutating } = useUpdateCollectionProducts(
    collection.id
  );
  const [rowSelection, setRowSelection] = (0, import_react.useState)({});
  const updater = (newSelection) => {
    const update = typeof newSelection === "function" ? newSelection(rowSelection) : newSelection;
    setValue(
      "add",
      Object.keys(update).filter((k) => update[k]),
      {
        shouldDirty: true,
        shouldTouch: true
      }
    );
    setRowSelection(update);
  };
  (0, import_react.useEffect)(() => {
    setValue(
      "add",
      Object.keys(rowSelection).filter((k) => rowSelection[k]),
      {
        shouldDirty: true,
        shouldTouch: true
      }
    );
  }, [rowSelection, setValue]);
  const { searchParams, raw } = useProductTableQuery({
    prefix: PREFIX,
    pageSize: PAGE_SIZE
  });
  const { products, count, isLoading, isError, error } = useProducts(
    {
      fields: "*variants,*sales_channels",
      ...searchParams
    },
    {
      placeholderData: keepPreviousData
    }
  );
  const columns = useColumns();
  const filters = useProductTableFilters(["collections"]);
  const { table } = useDataTable({
    data: products ?? [],
    columns,
    count,
    pageSize: PAGE_SIZE,
    prefix: PREFIX,
    getRowId: (row) => row.id,
    enableRowSelection: true,
    rowSelection: {
      state: rowSelection,
      updater
    },
    enablePagination: true,
    meta: {
      collectionId: collection.id
    }
  });
  const handleSubmit = form.handleSubmit(async (values) => {
    await mutateAsync(
      {
        add: values.add
      },
      {
        onSuccess: () => {
          toast.success(
            t2("collections.products.add.successToast", {
              count: values.add.length
            })
          );
          handleSuccess();
        },
        onError: (e) => {
          toast.error(e.message);
        }
      }
    );
  });
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime.jsx)(RouteFocusModal.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    KeyboundForm,
    {
      onSubmit: handleSubmit,
      className: "flex h-full flex-col overflow-hidden",
      children: [
        (0, import_jsx_runtime.jsx)(RouteFocusModal.Header, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
          form.formState.errors.add && (0, import_jsx_runtime.jsx)(Hint, { variant: "error", children: form.formState.errors.add.message }),
          (0, import_jsx_runtime.jsx)(RouteFocusModal.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", children: t2("actions.cancel") }) }),
          (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "submit", isLoading: isMutating, children: t2("actions.save") })
        ] }) }),
        (0, import_jsx_runtime.jsx)(RouteFocusModal.Body, { className: "size-full overflow-hidden", children: (0, import_jsx_runtime.jsx)(
          _DataTable,
          {
            table,
            columns,
            pageSize: PAGE_SIZE,
            count,
            queryObject: raw,
            filters,
            orderBy: [
              { key: "title", label: t2("fields.title") },
              { key: "created_at", label: t2("fields.createdAt") },
              { key: "updated_at", label: t2("fields.updatedAt") }
            ],
            prefix: PREFIX,
            isLoading,
            layout: "fill",
            pagination: true,
            search: "autofocus"
          }
        ) })
      ]
    }
  ) });
};
var columnHelper = createColumnHelper();
var useColumns = () => {
  const { t: t2 } = useTranslation();
  const base = useProductTableColumns();
  return (0, import_react.useMemo)(
    () => [
      columnHelper.display({
        id: "select",
        header: ({ table }) => {
          return (0, import_jsx_runtime.jsx)(
            Checkbox,
            {
              checked: table.getIsSomePageRowsSelected() ? "indeterminate" : table.getIsAllPageRowsSelected(),
              onCheckedChange: (value) => table.toggleAllPageRowsSelected(!!value)
            }
          );
        },
        cell: ({ row, table }) => {
          const { collectionId } = table.options.meta;
          const isAdded = row.original.collection_id === collectionId;
          const isSelected = row.getIsSelected() || isAdded;
          const Component = (0, import_jsx_runtime.jsx)(
            Checkbox,
            {
              checked: isSelected,
              disabled: isAdded,
              onCheckedChange: (value) => row.toggleSelected(!!value),
              onClick: (e) => {
                e.stopPropagation();
              }
            }
          );
          if (isAdded) {
            return (0, import_jsx_runtime.jsx)(
              Tooltip,
              {
                content: t2("salesChannels.productAlreadyAdded"),
                side: "right",
                children: Component
              }
            );
          }
          return Component;
        }
      }),
      ...base
    ],
    [t2, base]
  );
};
var CollectionAddProducts = () => {
  const { id } = useParams();
  const { collection, isLoading, isError, error } = useCollection(id);
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsx)(RouteFocusModal, { children: !isLoading && collection && (0, import_jsx_runtime2.jsx)(AddProductsToCollectionForm, { collection }) });
};
export {
  CollectionAddProducts as Component
};
//# sourceMappingURL=collection-add-products-JDYECFXF-KK5N363G.js.map
