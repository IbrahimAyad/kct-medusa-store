import {
  ChipInput
} from "./chunk-O3DYTTMP.js";
import "./chunk-EGRHWZRV.js";
import {
  KeyboundForm
} from "./chunk-H3QLNIQZ.js";
import {
  RouteDrawer,
  useRouteModal
} from "./chunk-RRVV3WYZ.js";
import "./chunk-VXOI3VOA.js";
import {
  t
} from "./chunk-XMLFM6ZI.js";
import {
  z
} from "./chunk-UESAM5J2.js";
import {
  useProduct,
  useUpdateProductOption
} from "./chunk-7YF3433E.js";
import "./chunk-KZEAZRGV.js";
import "./chunk-S7K3MYSB.js";
import {
  Form,
  useForm
} from "./chunk-MGWFURCB.js";
import {
  useTranslation
} from "./chunk-FSQ44SVG.js";
import "./chunk-WPKD3INM.js";
import {
  json,
  useParams
} from "./chunk-2WRJVAK6.js";
import "./chunk-FZZ47AFW.js";
import "./chunk-2COJD4UJ.js";
import {
  Button,
  Heading,
  Input
} from "./chunk-7TA3O4Z5.js";
import "./chunk-NOBDUI2K.js";
import {
  require_jsx_runtime
} from "./chunk-JURSM5AU.js";
import "./chunk-VARPEBF3.js";
import "./chunk-ZP5CUZDC.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/product-edit-option-MJORFO4B.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var CreateProductOptionSchema = z.object({
  title: z.string().min(1),
  values: z.array(z.string()).optional()
});
var CreateProductOptionForm = ({
  option
}) => {
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const form = useForm({
    defaultValues: {
      title: option.title,
      values: option.values.map((v) => v.value)
    },
    resolver: t(CreateProductOptionSchema)
  });
  const { mutateAsync, isPending } = useUpdateProductOption(
    option.product_id,
    option.id
  );
  const handleSubmit = form.handleSubmit(async (values) => {
    mutateAsync(
      {
        id: option.id,
        ...values
      },
      {
        onSuccess: () => {
          handleSuccess();
        }
      }
    );
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    KeyboundForm,
    {
      onSubmit: handleSubmit,
      className: "flex flex-1 flex-col overflow-hidden",
      children: [
        (0, import_jsx_runtime.jsxs)(RouteDrawer.Body, { className: "flex flex-1 flex-col gap-y-4 overflow-auto", children: [
          (0, import_jsx_runtime.jsx)(
            Form.Field,
            {
              control: form.control,
              name: "title",
              render: ({ field }) => {
                return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("products.fields.options.optionTitle") }),
                  (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                    Input,
                    {
                      ...field,
                      placeholder: t2(
                        "products.fields.options.optionTitlePlaceholder"
                      )
                    }
                  ) }),
                  (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
                ] });
              }
            }
          ),
          (0, import_jsx_runtime.jsx)(
            Form.Field,
            {
              control: form.control,
              name: "values",
              render: ({ field: { ...field } }) => {
                return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("products.fields.options.variations") }),
                  (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                    ChipInput,
                    {
                      ...field,
                      placeholder: t2(
                        "products.fields.options.variantionsPlaceholder"
                      )
                    }
                  ) }),
                  (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
                ] });
              }
            }
          )
        ] }),
        (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
          (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { variant: "secondary", size: "small", children: t2("actions.cancel") }) }),
          (0, import_jsx_runtime.jsx)(Button, { type: "submit", size: "small", isLoading: isPending, children: t2("actions.save") })
        ] }) })
      ]
    }
  ) });
};
var ProductEditOption = () => {
  const { id, option_id } = useParams();
  const { t: t2 } = useTranslation();
  const { product, isPending, isFetching, isError, error } = useProduct(id);
  const option = product == null ? void 0 : product.options.find((o) => o.id === option_id);
  if (!isPending && !isFetching && !option) {
    throw json({ message: `An option with ID ${option_id} was not found` }, 404);
  }
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime2.jsx)(RouteDrawer.Header, { children: (0, import_jsx_runtime2.jsx)(Heading, { children: t2("products.options.edit.header") }) }),
    option && (0, import_jsx_runtime2.jsx)(CreateProductOptionForm, { option })
  ] });
};
export {
  ProductEditOption as Component
};
//# sourceMappingURL=product-edit-option-MJORFO4B-H7ZLJN4S.js.map
