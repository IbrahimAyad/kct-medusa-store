import {
  getPaymentsFromOrder
} from "./chunk-HBVANEY7.js";
import "./chunk-PTU46BY7.js";
import {
  formatCurrency
} from "./chunk-UTJBGVIO.js";
import "./chunk-WVWTCVX2.js";
import {
  DEFAULT_FIELDS
} from "./chunk-ELYEQDRE.js";
import {
  getLocaleAmount
} from "./chunk-ZGRSCOQ5.js";
import {
  getCurrencySymbol
} from "./chunk-55MYIBGD.js";
import "./chunk-EGRHWZRV.js";
import {
  KeyboundForm
} from "./chunk-H3QLNIQZ.js";
import {
  RouteDrawer,
  useRouteModal
} from "./chunk-RRVV3WYZ.js";
import {
  t
} from "./chunk-XMLFM6ZI.js";
import {
  numberType,
  objectType,
  stringType
} from "./chunk-UESAM5J2.js";
import "./chunk-SQJS63XZ.js";
import "./chunk-OC57Q4WC.js";
import "./chunk-QJMXPFFL.js";
import "./chunk-LOUCI2Q4.js";
import {
  useRefundReasons
} from "./chunk-3KPNDMHA.js";
import "./chunk-ASAFUTMI.js";
import "./chunk-CUGIGQSE.js";
import "./chunk-EALJ6LYP.js";
import "./chunk-M2YD6SSP.js";
import "./chunk-H7RVGO5V.js";
import "./chunk-DIIJTXZ5.js";
import "./chunk-7VSODY7F.js";
import "./chunk-NAVAVTBR.js";
import "./chunk-GPU4IRKF.js";
import {
  useRefundPayment
} from "./chunk-HVSYJRGA.js";
import "./chunk-YXEQJJQ6.js";
import "./chunk-SITKGSYT.js";
import "./chunk-LQUA6FVL.js";
import "./chunk-VHV5XFAR.js";
import "./chunk-L4VVV4Q5.js";
import "./chunk-22K6ITTI.js";
import "./chunk-5PZIRSSS.js";
import "./chunk-WYOKNF2W.js";
import {
  useOrder
} from "./chunk-J5VA6PIN.js";
import "./chunk-MSCXQBUM.js";
import "./chunk-4QIH7XF5.js";
import "./chunk-NQP3QFYS.js";
import "./chunk-DEUZS3W7.js";
import "./chunk-UMSNNOPD.js";
import "./chunk-QQSOZAMU.js";
import "./chunk-7YF3433E.js";
import "./chunk-KZEAZRGV.js";
import "./chunk-S7K3MYSB.js";
import {
  Form,
  useForm
} from "./chunk-MGWFURCB.js";
import {
  useTranslation
} from "./chunk-FSQ44SVG.js";
import "./chunk-WPKD3INM.js";
import {
  useNavigate,
  useParams,
  useSearchParams
} from "./chunk-2WRJVAK6.js";
import "./chunk-FZZ47AFW.js";
import "./chunk-2COJD4UJ.js";
import {
  Button,
  CurrencyInput2 as CurrencyInput,
  Heading,
  Label,
  Select,
  Textarea,
  toast
} from "./chunk-7TA3O4Z5.js";
import "./chunk-NOBDUI2K.js";
import {
  require_jsx_runtime
} from "./chunk-JURSM5AU.js";
import "./chunk-VARPEBF3.js";
import {
  require_react
} from "./chunk-ZP5CUZDC.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/order-create-refund-WVD26GN3.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var CreateRefundSchema = objectType({
  amount: numberType(),
  refund_reason_id: stringType().nullish(),
  note: stringType().optional()
});
var CreateRefundForm = ({
  order,
  refundReasons
}) => {
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const paymentId = searchParams.get("paymentId");
  const payments = getPaymentsFromOrder(order);
  const payment = payments.find((p) => p.id === paymentId);
  const paymentAmount = (payment == null ? void 0 : payment.amount) || 0;
  const form = useForm({
    defaultValues: {
      amount: paymentAmount,
      note: ""
    },
    resolver: t(CreateRefundSchema)
  });
  (0, import_react.useEffect)(() => {
    const pendingDifference = order.summary.pending_difference;
    const paymentAmount2 = (payment == null ? void 0 : payment.amount) || 0;
    const pendingAmount = pendingDifference < 0 ? Math.min(pendingDifference, paymentAmount2) : paymentAmount2;
    const normalizedAmount = pendingAmount < 0 ? pendingAmount * -1 : pendingAmount;
    form.setValue("amount", normalizedAmount);
  }, [payment]);
  const { mutateAsync, isPending } = useRefundPayment(order.id, payment == null ? void 0 : payment.id);
  const handleSubmit = form.handleSubmit(async (data) => {
    await mutateAsync(
      {
        amount: data.amount,
        refund_reason_id: data.refund_reason_id,
        note: data.note
      },
      {
        onSuccess: () => {
          toast.success(
            t2("orders.payment.refundPaymentSuccess", {
              amount: formatCurrency(data.amount, payment == null ? void 0 : payment.currency_code)
            })
          );
          handleSuccess();
        },
        onError: (error) => {
          toast.error(error.message);
        }
      }
    );
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    KeyboundForm,
    {
      onSubmit: handleSubmit,
      className: "flex size-full flex-col overflow-hidden",
      children: [
        (0, import_jsx_runtime.jsx)(RouteDrawer.Body, { className: "flex-1 overflow-auto", children: (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-4", children: [
          (0, import_jsx_runtime.jsxs)(
            Select,
            {
              value: payment == null ? void 0 : payment.id,
              onValueChange: (value) => {
                navigate(`/orders/${order.id}/refund?paymentId=${value}`, {
                  replace: true
                });
              },
              children: [
                (0, import_jsx_runtime.jsx)(Label, { className: "txt-compact-small mb-[-6px] font-sans font-medium", children: t2("orders.payment.selectPaymentToRefund") }),
                (0, import_jsx_runtime.jsx)(Select.Trigger, { children: (0, import_jsx_runtime.jsx)(
                  Select.Value,
                  {
                    placeholder: t2("orders.payment.selectPaymentToRefund")
                  }
                ) }),
                (0, import_jsx_runtime.jsx)(Select.Content, { children: payments.map((payment2) => {
                  const totalRefunded = payment2.refunds.reduce(
                    (acc, next) => next.amount + acc,
                    0
                  );
                  return (0, import_jsx_runtime.jsxs)(
                    Select.Item,
                    {
                      value: payment2.id,
                      disabled: !!payment2.canceled_at || totalRefunded >= payment2.amount,
                      children: [
                        (0, import_jsx_runtime.jsxs)("span", { children: [
                          getLocaleAmount(
                            payment2.amount,
                            payment2.currency_code
                          ),
                          " - "
                        ] }),
                        (0, import_jsx_runtime.jsx)("span", { children: payment2.provider_id }),
                        (0, import_jsx_runtime.jsxs)("span", { children: [
                          " - (",
                          payment2.id.replace("pay_", ""),
                          ")"
                        ] })
                      ]
                    },
                    payment2.id
                  );
                }) })
              ]
            }
          ),
          (0, import_jsx_runtime.jsx)(
            Form.Field,
            {
              control: form.control,
              name: "amount",
              rules: {
                required: true,
                min: 0,
                max: paymentAmount
              },
              render: ({ field: { onChange, ...field } }) => {
                return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("fields.amount") }),
                  (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                    CurrencyInput,
                    {
                      ...field,
                      min: 0,
                      onValueChange: (value) => {
                        const fieldValue = value ? parseInt(value) : "";
                        if (fieldValue && !isNaN(fieldValue)) {
                          if (fieldValue < 0 || fieldValue > paymentAmount) {
                            form.setError(`amount`, {
                              type: "manual",
                              message: t2(
                                "orders.payment.createRefundWrongQuantity",
                                { number: paymentAmount }
                              )
                            });
                          } else {
                            form.clearErrors(`amount`);
                          }
                        }
                        onChange(fieldValue);
                      },
                      code: order.currency_code,
                      symbol: getCurrencySymbol(order.currency_code),
                      value: field.value
                    }
                  ) }),
                  (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
                ] });
              }
            }
          ),
          (0, import_jsx_runtime.jsx)(
            Form.Field,
            {
              control: form.control,
              name: `note`,
              render: ({ field }) => {
                return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("fields.note") }),
                  (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(Textarea, { ...field }) }),
                  (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
                ] });
              }
            }
          )
        ] }) }),
        (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
          (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { variant: "secondary", size: "small", children: t2("actions.cancel") }) }),
          (0, import_jsx_runtime.jsx)(
            Button,
            {
              isLoading: isPending,
              type: "submit",
              variant: "primary",
              size: "small",
              disabled: !!Object.keys(form.formState.errors || {}).length,
              children: t2("actions.save")
            }
          )
        ] }) })
      ]
    }
  ) });
};
var OrderCreateRefund = () => {
  const { t: t2 } = useTranslation();
  const params = useParams();
  const { order } = useOrder(params.id, {
    fields: DEFAULT_FIELDS
  });
  const {
    refund_reasons: refundReasons,
    isLoading: isRefundReasonsLoading,
    isError: isRefundReasonsError,
    error: refundReasonsError
  } = useRefundReasons();
  if (isRefundReasonsError) {
    throw refundReasonsError;
  }
  return (0, import_jsx_runtime2.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime2.jsx)(RouteDrawer.Header, { children: (0, import_jsx_runtime2.jsx)(Heading, { children: t2("orders.payment.createRefund") }) }),
    order && !isRefundReasonsLoading && refundReasons && (0, import_jsx_runtime2.jsx)(CreateRefundForm, { order, refundReasons })
  ] });
};
export {
  OrderCreateRefund as Component
};
//# sourceMappingURL=order-create-refund-WVD26GN3-5YJ2P3TY.js.map
