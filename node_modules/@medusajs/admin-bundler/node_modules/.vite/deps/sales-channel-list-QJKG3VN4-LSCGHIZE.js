import {
  SingleColumnPage
} from "./chunk-3XLI6TEK.js";
import {
  useSalesChannelTableColumns,
  useSalesChannelTableEmptyState,
  useSalesChannelTableFilters,
  useSalesChannelTableQuery
} from "./chunk-FQUCW3VY.js";
import "./chunk-2PPHQOA5.js";
import {
  DataTable
} from "./chunk-QXFUCOL3.js";
import "./chunk-LNH4KKOB.js";
import "./chunk-PWUDRQ7V.js";
import {
  useDashboardExtension
} from "./chunk-UT557UZM.js";
import "./chunk-JIWIBYO5.js";
import "./chunk-XMLFM6ZI.js";
import "./chunk-UESAM5J2.js";
import "./chunk-SQJS63XZ.js";
import "./chunk-OC57Q4WC.js";
import "./chunk-O2SHVWJ7.js";
import "./chunk-QJMXPFFL.js";
import "./chunk-LOUCI2Q4.js";
import "./chunk-3KPNDMHA.js";
import "./chunk-ASAFUTMI.js";
import "./chunk-CUGIGQSE.js";
import "./chunk-EALJ6LYP.js";
import "./chunk-M2YD6SSP.js";
import "./chunk-H7RVGO5V.js";
import "./chunk-DIIJTXZ5.js";
import "./chunk-7VSODY7F.js";
import "./chunk-NAVAVTBR.js";
import "./chunk-GPU4IRKF.js";
import "./chunk-HVSYJRGA.js";
import "./chunk-YXEQJJQ6.js";
import "./chunk-SITKGSYT.js";
import "./chunk-LQUA6FVL.js";
import "./chunk-VHV5XFAR.js";
import "./chunk-L4VVV4Q5.js";
import "./chunk-22K6ITTI.js";
import "./chunk-5PZIRSSS.js";
import "./chunk-WYOKNF2W.js";
import "./chunk-J5VA6PIN.js";
import "./chunk-MSCXQBUM.js";
import {
  useStore
} from "./chunk-4QIH7XF5.js";
import "./chunk-NQP3QFYS.js";
import "./chunk-DEUZS3W7.js";
import {
  useDeleteSalesChannelLazy,
  useSalesChannels
} from "./chunk-UMSNNOPD.js";
import "./chunk-QQSOZAMU.js";
import "./chunk-7YF3433E.js";
import "./chunk-KZEAZRGV.js";
import "./chunk-S7K3MYSB.js";
import "./chunk-MGWFURCB.js";
import {
  useTranslation
} from "./chunk-FSQ44SVG.js";
import "./chunk-WPKD3INM.js";
import {
  useNavigate
} from "./chunk-2WRJVAK6.js";
import {
  keepPreviousData
} from "./chunk-FZZ47AFW.js";
import "./chunk-2COJD4UJ.js";
import {
  Container,
  PencilSquare,
  Trash,
  createDataTableColumnHelper,
  toast,
  usePrompt
} from "./chunk-7TA3O4Z5.js";
import "./chunk-NOBDUI2K.js";
import {
  require_jsx_runtime
} from "./chunk-JURSM5AU.js";
import "./chunk-VARPEBF3.js";
import {
  require_react
} from "./chunk-ZP5CUZDC.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/sales-channel-list-QJKG3VN4.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var PAGE_SIZE = 20;
var SalesChannelListTable = () => {
  const { t } = useTranslation();
  const { store } = useStore();
  const searchParams = useSalesChannelTableQuery({
    pageSize: PAGE_SIZE
  });
  const { sales_channels, count, isPending, isError, error } = useSalesChannels(
    searchParams,
    {
      placeholderData: keepPreviousData
    }
  );
  const columns = useColumns();
  const filters = useSalesChannelTableFilters();
  const emptyState = useSalesChannelTableEmptyState();
  const sales_channels_data = (sales_channels == null ? void 0 : sales_channels.map((sales_channel) => {
    return {
      ...sales_channel,
      is_default: (store == null ? void 0 : store.default_sales_channel_id) === sales_channel.id
    };
  })) ?? [];
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime.jsx)(Container, { className: "p-0", children: (0, import_jsx_runtime.jsx)(
    DataTable,
    {
      data: sales_channels_data,
      columns,
      rowCount: count,
      getRowId: (row) => row.id,
      pageSize: PAGE_SIZE,
      filters,
      isLoading: isPending,
      emptyState,
      heading: t("salesChannels.domain"),
      subHeading: t("salesChannels.subtitle"),
      action: {
        label: t("actions.create"),
        to: "/settings/sales-channels/create"
      },
      rowHref: (row) => `/settings/sales-channels/${row.id}`
    }
  ) });
};
var columnHelper = createDataTableColumnHelper();
var useColumns = () => {
  const { t } = useTranslation();
  const prompt = usePrompt();
  const navigate = useNavigate();
  const base = useSalesChannelTableColumns();
  const { mutateAsync } = useDeleteSalesChannelLazy();
  const handleDelete = (0, import_react.useCallback)(
    async (salesChannel) => {
      const confirm = await prompt({
        title: t("general.areYouSure"),
        description: t("salesChannels.deleteSalesChannelWarning", {
          name: salesChannel.name
        }),
        verificationInstruction: t("general.typeToConfirm"),
        verificationText: salesChannel.name,
        confirmText: t("actions.delete"),
        cancelText: t("actions.cancel")
      });
      if (!confirm) {
        return;
      }
      await mutateAsync(salesChannel.id, {
        onSuccess: () => {
          toast.success(t("salesChannels.toast.delete"));
        },
        onError: (e) => {
          toast.error(e.message);
        }
      });
    },
    [t, prompt, mutateAsync]
  );
  return (0, import_react.useMemo)(
    () => [
      ...base,
      columnHelper.action({
        actions: (ctx) => {
          const disabledTooltip = ctx.row.original.is_default ? t("salesChannels.tooltip.cannotDeleteDefault") : void 0;
          return [
            [
              {
                icon: (0, import_jsx_runtime.jsx)(PencilSquare, {}),
                label: t("actions.edit"),
                onClick: () => navigate(
                  `/settings/sales-channels/${ctx.row.original.id}/edit`
                )
              }
            ],
            [
              {
                icon: (0, import_jsx_runtime.jsx)(Trash, {}),
                label: t("actions.delete"),
                onClick: () => handleDelete(ctx.row.original),
                disabled: ctx.row.original.is_default,
                disabledTooltip
              }
            ]
          ];
        }
      })
    ],
    [base, handleDelete, navigate, t]
  );
};
var SalesChannelList = () => {
  const { getWidgets } = useDashboardExtension();
  return (0, import_jsx_runtime2.jsx)(
    SingleColumnPage,
    {
      widgets: {
        before: getWidgets("sales_channel.list.before"),
        after: getWidgets("sales_channel.list.after")
      },
      hasOutlet: true,
      children: (0, import_jsx_runtime2.jsx)(SalesChannelListTable, {})
    }
  );
};
export {
  SalesChannelList as Component
};
//# sourceMappingURL=sales-channel-list-QJKG3VN4-LSCGHIZE.js.map
