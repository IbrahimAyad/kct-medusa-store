import {
  useDeletePriceListAction
} from "./chunk-5IYHGF46.js";
import {
  getPriceListStatus
} from "./chunk-TFLXDRCC.js";
import "./chunk-KXUBVGOF.js";
import {
  TextCell,
  TextHeader
} from "./chunk-ICY2MZON.js";
import {
  StatusCell
} from "./chunk-STN2GTYD.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-Z7JNCSGP.js";
import {
  _DataTable,
  useDataTable
} from "./chunk-OVTUYWY6.js";
import "./chunk-MNCUMGDK.js";
import "./chunk-JTFKFVR4.js";
import "./chunk-W2QVROAD.js";
import {
  SingleColumnPage
} from "./chunk-3XLI6TEK.js";
import "./chunk-LKYIPMJI.js";
import {
  useDateTableFilters
} from "./chunk-ZPMIOCCF.js";
import "./chunk-6A5KAQL3.js";
import "./chunk-ZXVW7VE7.js";
import "./chunk-X5HQAIV7.js";
import {
  useQueryParams
} from "./chunk-LNH4KKOB.js";
import "./chunk-PWUDRQ7V.js";
import "./chunk-OYOURVXX.js";
import {
  useDashboardExtension
} from "./chunk-UT557UZM.js";
import "./chunk-JIWIBYO5.js";
import "./chunk-XMLFM6ZI.js";
import "./chunk-UESAM5J2.js";
import {
  ActionMenu
} from "./chunk-SQJS63XZ.js";
import "./chunk-OC57Q4WC.js";
import "./chunk-I2UAGZ5U.js";
import "./chunk-O2SHVWJ7.js";
import "./chunk-QJMXPFFL.js";
import "./chunk-LOUCI2Q4.js";
import "./chunk-XAMQAMS2.js";
import "./chunk-ROURSU5C.js";
import {
  usePriceLists
} from "./chunk-LQUA6FVL.js";
import "./chunk-VHV5XFAR.js";
import "./chunk-7YF3433E.js";
import "./chunk-KZEAZRGV.js";
import "./chunk-S7K3MYSB.js";
import "./chunk-MGWFURCB.js";
import {
  useTranslation
} from "./chunk-FSQ44SVG.js";
import "./chunk-WPKD3INM.js";
import {
  Link
} from "./chunk-2WRJVAK6.js";
import {
  keepPreviousData
} from "./chunk-FZZ47AFW.js";
import "./chunk-2COJD4UJ.js";
import {
  Button,
  Container,
  Heading,
  PencilSquare,
  Text,
  Trash,
  createColumnHelper
} from "./chunk-7TA3O4Z5.js";
import "./chunk-NOBDUI2K.js";
import {
  require_jsx_runtime
} from "./chunk-JURSM5AU.js";
import "./chunk-VARPEBF3.js";
import {
  require_react
} from "./chunk-ZP5CUZDC.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/price-list-list-PCH6JHXA.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var PriceListListTableActions = ({
  priceList
}) => {
  const { t } = useTranslation();
  const handleDelete = useDeletePriceListAction({ priceList });
  return (0, import_jsx_runtime.jsx)(
    ActionMenu,
    {
      groups: [
        {
          actions: [
            {
              label: t("actions.edit"),
              to: `${priceList.id}/edit`,
              icon: (0, import_jsx_runtime.jsx)(PencilSquare, {})
            }
          ]
        },
        {
          actions: [
            {
              label: t("actions.delete"),
              onClick: handleDelete,
              icon: (0, import_jsx_runtime.jsx)(Trash, {})
            }
          ]
        }
      ]
    }
  );
};
var columnHelper = createColumnHelper();
var usePricingTableColumns = () => {
  const { t } = useTranslation();
  return (0, import_react.useMemo)(
    () => [
      columnHelper.accessor("title", {
        header: () => (0, import_jsx_runtime2.jsx)(TextHeader, { text: t("fields.title") }),
        cell: (info) => info.getValue()
      }),
      columnHelper.accessor("status", {
        header: t("priceLists.fields.status.label"),
        cell: ({ row }) => {
          const { color, text } = getPriceListStatus(t, row.original);
          return (0, import_jsx_runtime2.jsx)(StatusCell, { color, children: text });
        }
      }),
      columnHelper.accessor("prices", {
        header: t("priceLists.fields.priceOverrides.header"),
        cell: (info) => {
          var _a;
          return (0, import_jsx_runtime2.jsx)(TextCell, { text: `${((_a = info.getValue()) == null ? void 0 : _a.length) || "-"}` });
        }
      }),
      columnHelper.display({
        id: "actions",
        cell: ({ row }) => (0, import_jsx_runtime2.jsx)(PriceListListTableActions, { priceList: row.original })
      })
    ],
    [t]
  );
};
var usePricingTableFilters = () => {
  const dateFilters = useDateTableFilters();
  return dateFilters;
};
var usePricingTableQuery = ({
  pageSize = 20,
  prefix
}) => {
  var _a;
  const raw = useQueryParams(["offset", "q", "order", "status"], prefix);
  const searchParams = {
    limit: pageSize,
    offset: raw.offset ? Number(raw.offset) : 0,
    order: raw.order,
    status: (_a = raw.status) == null ? void 0 : _a.split(","),
    q: raw.q
  };
  return {
    searchParams,
    raw
  };
};
var PAGE_SIZE = 20;
var PriceListListTable = () => {
  const { t } = useTranslation();
  const { searchParams, raw } = usePricingTableQuery({
    pageSize: PAGE_SIZE
  });
  const { price_lists, count, isLoading, isError, error } = usePriceLists(
    searchParams,
    {
      placeholderData: keepPreviousData
    }
  );
  const filters = usePricingTableFilters();
  const columns = usePricingTableColumns();
  const { table } = useDataTable({
    data: price_lists || [],
    columns,
    count,
    enablePagination: true,
    getRowId: (row) => row.id,
    pageSize: PAGE_SIZE
  });
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime3.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime3.jsxs)("div", { children: [
        (0, import_jsx_runtime3.jsx)(Heading, { children: t("priceLists.domain") }),
        (0, import_jsx_runtime3.jsx)(Text, { className: "text-ui-fg-subtle", size: "small", children: t("priceLists.subtitle") })
      ] }),
      (0, import_jsx_runtime3.jsx)(Button, { size: "small", variant: "secondary", asChild: true, children: (0, import_jsx_runtime3.jsx)(Link, { to: "create", children: t("actions.create") }) })
    ] }),
    (0, import_jsx_runtime3.jsx)(
      _DataTable,
      {
        table,
        columns,
        count,
        filters,
        orderBy: [
          { key: "title", label: t("fields.title") },
          { key: "status", label: t("fields.status") },
          { key: "created_at", label: t("fields.createdAt") },
          { key: "updated_at", label: t("fields.updatedAt") }
        ],
        queryObject: raw,
        pageSize: PAGE_SIZE,
        navigateTo: (row) => row.original.id,
        isLoading,
        pagination: true,
        search: true
      }
    )
  ] });
};
var PriceListList = () => {
  const { getWidgets } = useDashboardExtension();
  return (0, import_jsx_runtime4.jsx)(
    SingleColumnPage,
    {
      widgets: {
        after: getWidgets("price_list.list.after"),
        before: getWidgets("price_list.list.before")
      },
      children: (0, import_jsx_runtime4.jsx)(PriceListListTable, {})
    }
  );
};
export {
  PriceListList as Component
};
//# sourceMappingURL=price-list-list-PCH6JHXA-RFTA22JP.js.map
